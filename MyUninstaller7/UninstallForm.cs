using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Drawing.Imaging;
using System.Diagnostics;
using System.IO;
using Microsoft.Win32;

namespace MyUninstaller7 {
    public partial class UninstallForm : Form {
        private class Record {
            public string Path;
            public bool StillExists;
            // 0 - RegKey, 1 - Folder, 2 - File
            public int Type;
            public bool Checked = true;
            public Record(string path) {
                Path = path;
                if (Utils.utils.IsRegistry(path)) Type = 0;
                else if (path[path.Length - 1] == '\\') Type = 1;
                else Type = 2;
            }
        }
        private List<Record> records = new List<Record>();
        private bool _ShowingInstalled;

        private RecordStore.Record rsr;
        public UninstallForm(RecordStore.Record rec, bool Installed) {
            InitializeComponent();
            rsr = rec;
            _ShowingInstalled = Installed;
            Text = (Installed ? "Installed items" : "Deleted items");
            label1.Text = (_ShowingInstalled ? "Installation" : "Deletion") + " log for '" + rec.DisplayName + "':";
            if (!Installed) {
                for (int i=1; i<toolStrip1.Items.Count; ++i)
                    toolStrip1.Items[i].Visible = false;
                listView1.CheckBoxes = false;
                button2.Visible = false;
                button3.Visible = false;
            }
            for (int i = 0; i < 3; ++i)
                imageList1.Images.Add(Utils.utils.FadeImage((Image)imageList1.Images[i].Clone()));
            foreach (string s in (Installed ? rec.newItems : rec.deletedItems))
                records.Add(new Record(s));
            PopulateItems();
        }

        private bool CreateScript(TextWriter stream) {
            stream.WriteLine(":: This script was autogenerated by My Uninstaller 7\n::");
            stream.WriteLine("@echo off\n");
            stream.WriteLine("echo Uninstallation target: '" + rsr.DisplayName + "'\necho.\n");
            if (rsr.UninstallEntries().Count == 0) {
                stream.WriteLine("echo Native uninstallation command was not automatically detected.");
                stream.WriteLine("echo It is recommended to run the program uninstallation manually from Add/Remove, ");
                stream.WriteLine("echo    if the entry is still there.");
                stream.WriteLine("pause");
                stream.WriteLine("echo.\n");
            }
            foreach (string uninst in rsr.UninstallValuesOf("UninstallString")) {
                stream.WriteLine("echo Running " + uninst);
                stream.WriteLine("start /w \"\" " + uninst);
            }
            stream.WriteLine("echo Warning: Uninstallation will begin now. This process is irreversible.");
            stream.WriteLine("echo There will bo no further warnings. Close window now to cancel.");
            stream.WriteLine("pause\n");
            foreach (Record record in records) {
                if (!record.Checked) continue;
                stream.WriteLine("echo Removing " + record.Path);
                if (record.Type==0) stream.WriteLine("reg delete /f " + record.Path);
                else if (record.Type==1) stream.WriteLine("rmdir /s /q \"" + record.Path + "\"");
                else if (record.Type==2) stream.WriteLine("del /f \"" + record.Path + "\"");
            }
            stream.WriteLine("echo.");
            stream.WriteLine("echo Done!");
            stream.WriteLine("pause");
            return true;
        }

        private void PerformUninstall() {
            bool nativeProcessRan = false;
            while (true) {
                List<string> uninstCmds = rsr.UninstallValuesOf("UninstallString");
                if (uninstCmds.Count == 0) break;
                DialogResult dresult = MessageBox.Show("The entries this application has created for automatic uninstallation are still present. " +
                    "It is recommended that the native uninstallation is run first. " +
                    "Do you want to run them now?\n\n" +
                    uninstCmds.Select(a=>("Uninstallation command: '"+a+"'")).Aggregate((a, b) => a + "\n" + b),
                    "Uninstallation",
                    MessageBoxButtons.YesNoCancel,
                    MessageBoxIcon.Question);
                if (dresult == DialogResult.Cancel) return;
                else if (dresult == DialogResult.No) break;
                nativeProcessRan = true;
                // need to separate command and argument
                string progName=uninstCmds[0].Trim(), argument = "";
                int splitPos = -1;
                if (progName[0] == '"')
                    splitPos = progName.IndexOf('"', 1);
                else splitPos = progName.IndexOf(' ');
                if (splitPos > -1) {
                    argument = progName.Substring(splitPos + 1);
                    progName = progName.Substring(0, splitPos + 1);
                }
                Process puninst = Process.Start(progName, argument);
                while (true) {
                    MessageBox.Show("Native uninstallation process ('" + uninstCmds[0] + "') is running. Please click Ok when the process completes.",
                        "Uninstaller 7",
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Information);
                    if (puninst.HasExited) break;
                    dresult = MessageBox.Show("It appears that the process '" + uninstCmds[0] + "'has not yest terminated! Continue anyway?",
                        "Uninstaller 7",
                        MessageBoxButtons.YesNoCancel,
                        MessageBoxIcon.Exclamation,
                        MessageBoxDefaultButton.Button2);
                    if (dresult == DialogResult.Cancel) return;
                    else if (dresult == DialogResult.Yes) break;
                }
            }
            if (nativeProcessRan) PopulateItems();
            // Now that the native uninstallation is taken care of, here begins the removal of entries part
            if (records.All(a => !a.Checked)) {
                MessageBox.Show("There is nothing remaining to uninstall.",
                    "Uninstaller 7",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Information);
                return;
            }
            if (MessageBox.Show("This will begin the uninstallation. There will be no further warning. Press Ok to continue.",
                "Uninstaller 7",
                MessageBoxButtons.OKCancel,
                MessageBoxIcon.Exclamation) == DialogResult.Cancel) return;
            foreach (Record record in records) {
                if (!record.Checked) continue;
                if (record.Type == 0) {
                    string parent = Utils.utils.parentPath(record.Path);
                    string child = record.Path.Substring(parent.Length);
                    RegistryKey rk = Utils.utils.OpenRegKey(parent, true);
                    if (rk != null) {
                        try {
                            rk.DeleteSubKeyTree(child);
                        }
                        catch (Exception) { }
                        rk.Close();
                    }
                }
                else if (record.Type == 1) {
                    try {
                        Directory.Delete(record.Path, true);
                    }
                    catch { }
                }
                else if (record.Type == 2) {
                    File.Delete(record.Path);
                }
            }
            PopulateItems();
            bool remaining = records.All(a => !a.Checked);
            MessageBox.Show(remaining ? "Some items are still remaining!" : "Uninstallation has completed successfully.",
                "Uninstaller 7",
                MessageBoxButtons.OK,
                remaining ? MessageBoxIcon.Asterisk : MessageBoxIcon.Information);
        }

        // This scans for existance, sorts, and populates the list view
        private void PopulateItems() {
            foreach (Record rec in records)
                rec.StillExists = Utils.utils.Exists(rec.Path);
            records.Sort((a, b) => {
                if (a.StillExists && !b.StillExists) return -1;
                else if (!a.StillExists && b.StillExists) return 1;
                else if (a.Type == b.Type) return a.Path.CompareTo(b.Path);
                else return a.Type.CompareTo(b.Type);
            });
            listView1.Items.Clear();
            foreach (Record rec in records) {
                int imageIndex = rec.Type;
                if (!rec.StillExists) imageIndex += 3;
                // Adding it triggers the Checked
                bool isChecked = rec.Checked;
                ListViewItem listItem = listView1.Items.Add(rec.Path, imageIndex);
                if (!rec.StillExists) isChecked = false;
                listItem.Checked = isChecked;
                // The above line does not automatically set rec.Checked
                rec.Checked = isChecked;
                if (!rec.StillExists)
                    listItem.ForeColor = Color.LightGray;
                if (rec.Type == 0) listItem.BackColor = Color.GhostWhite;
                else if (rec.Type == 1) listItem.BackColor = Color.LightYellow;
                else listItem.BackColor = Color.White;
            }
            columnHeader1.AutoResize(ColumnHeaderAutoResizeStyle.ColumnContent);
        }

        private void listView1_ItemChecked(object sender, ItemCheckedEventArgs e) {
            if (!records[e.Item.Index].StillExists) e.Item.Checked = false;
            else records[e.Item.Index].Checked = e.Item.Checked;
        }

        private void toolStripButton1_Click(object sender, EventArgs e) {
            PopulateItems();
        }

        private void markUnmark_Click(object sender, EventArgs e) {
            // Mark/unmark all
            bool selectedOnly = sender.Equals(button3);
            bool anyChecked = false;
            for (int i = 0; i < records.Count; ++i) {
                if (!selectedOnly || listView1.Items[i].Selected) {
                    if (records[i].Checked && records[i].StillExists) {
                        anyChecked = true;
                        break;
                    }
                }
            }
            bool desiredState = !anyChecked;
            for (int i=0; i<records.Count; ++i) {
                Record rec=records[i];
                if ((!selectedOnly || listView1.Items[i].Selected) && rec.StillExists) {
                    rec.Checked = desiredState;
                    listView1.Items[i].Checked = desiredState;
                }
            }
        }

        private void toolStripButton2_Click(object sender, EventArgs e) {
            if (records.All(a => !a.Checked)) {
                MessageBox.Show("Cannot create script since none of the entries is selected to be in there.",
                    "Uninstaller 7",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Exclamation);
                return;
            }
            saveFileDialog1.FileName = "Uninstall '" + rsr.DisplayName + "'";
            if (saveFileDialog1.ShowDialog() == DialogResult.OK) {
                //MessageBox.Show(saveFileDialog1.FileName);
                using (StreamWriter sw = new StreamWriter(saveFileDialog1.FileName)) {
                    if (CreateScript(sw))
                        MessageBox.Show("An uninstallation script has been created based on the currently selected entries and the current state of the software.",
                            "Uninstaller 7",
                            MessageBoxButtons.OK,
                            MessageBoxIcon.Information);
                    else MessageBox.Show("Error encountered while creating uninstallation script.",
                        "Uninstaller 7",
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Warning);
                }
            }
        }

        private void toolStripButton3_Click(object sender, EventArgs e) {
            PerformUninstall();
        }
    }
}
